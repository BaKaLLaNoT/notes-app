{"version":3,"sources":["components/Note.js","components/Notification.js","components/Togglable.js","components/LoginForm.js","components/NoteForm.js","services/notes.js","services/login.js","Notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","to","id","content","onClick","Notification","message","Togglable","forwardRef","ref","children","buttonLabel","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","displayName","LoginForm","username","password","handlePasswordChange","handleSubmit","handleUsernameChange","onSubmit","type","value","name","placeholder","onChange","NoteForm","addNote","handleLogout","newNote","setNewNote","togglableRef","useRef","event","preventDefault","current","target","baseUrl","token","axios","get","then","response","data","newObject","config","headers","Authorization","post","put","newToken","login","credentials","a","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","loginService","console","log","setItem","stringify","setTimeout","removeItem","notesToShow","filter","noteObject","returnedNote","concat","map","i","find","n","changedNote","catch","toggleImportanceOf","Home","Users","inlineStyles","padding","path","element","Notes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ff384b5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important'\r\n    : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      <Link to={`/notes/${note.id}`}>{note.content}</Link>\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Togglable = forwardRef(({ children, buttonLabel }, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => setVisible(!visible)\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return { toggleVisibility }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {children}\r\n        <button onClick={toggleVisibility}>Cancel</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nTogglable.displayName = 'Togglable'\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Togglable\r\n","import React from 'react'\r\nimport Togglable from './Togglable'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function LoginForm ({\r\n  username,\r\n  password,\r\n  handlePasswordChange,\r\n  handleSubmit,\r\n  handleUsernameChange\r\n}) {\r\n  return (\r\n    <Togglable buttonLabel='Show Login'>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <input\r\n            type='text'\r\n            value={username}\r\n            name='Username'\r\n            placeholder='Username'\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <input\r\n            type='password'\r\n            value={password}\r\n            name='Password'\r\n            placeholder='Password'\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button id='form-login-button'>Login</button>\r\n      </form>\r\n    </Togglable>\r\n  )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  username: PropTypes.string\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport Togglable from './Togglable'\r\n\r\nexport default function NoteForm ({ addNote, handleLogout }) {\r\n  const [newNote, setNewNote] = useState('')\r\n  const togglableRef = useRef()\r\n\r\n  const handleChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      important: false\r\n    }\r\n    addNote(noteObject)\r\n    setNewNote('')\r\n    togglableRef.current.toggleVisibility()\r\n  }\r\n\r\n  return (\r\n    <Togglable buttonLabel='New Note' ref={togglableRef}>\r\n      <h3>Create a new note</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          placeholder='Write your note content'\r\n          value={newNote}\r\n          onChange={handleChange}\r\n        />\r\n        <button type='submit'>save</button>\r\n      </form>\r\n      <div>\r\n        <button onClick={handleLogout}>Logout</button>\r\n      </div>\r\n    </Togglable>\r\n  )\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = (newToken) => {\r\n  token = `Bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  const request = axios.post(baseUrl, newObject, config)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getAll, create, update, setToken }\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async (credentials) => {\r\n  const { data } = await axios.post(baseUrl, credentials)\r\n  return data\r\n}\r\n\r\nexport default { login }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport LoginForm from './components/LoginForm'\r\nimport NoteForm from './components/NoteForm'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [user, setUser] = useState(null)\r\n\r\n  // LEER NOTAS\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  // LEER LOCAL STORAGE\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteAppUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      setUser(user)\r\n      noteService.setToken(user.token)\r\n    }\r\n  }, [])\r\n\r\n  const addNote = (noteObject) => {\r\n    noteService.create(noteObject).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote))\r\n    })\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\r\n      })\r\n      .catch(() => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n      })\r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    try {\r\n      const user = await loginService.login({ username, password })\r\n      console.log(user)\r\n      window.localStorage.setItem('loggedNoteAppUser', JSON.stringify(user))\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (e) {\r\n      setErrorMessage('Wrong credentials!')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  const handleLogout = async (event) => {\r\n    setUser(null)\r\n    noteService.setToken(user.token)\r\n    window.localStorage.removeItem('loggedNoteAppUser')\r\n  }\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important)\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      {user\r\n        ? (\r\n          <NoteForm addNote={addNote} handleLogout={handleLogout} />\r\n          )\r\n        : (\r\n          <LoginForm\r\n            username={username}\r\n            password={password}\r\n            handleUsernameChange={({ target }) => setUsername(target.value)}\r\n            handlePasswordChange={({ target }) => setPassword(target.value)}\r\n            handleSubmit={handleSubmit}\r\n          />\r\n          )}\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => (\r\n          <Note\r\n            key={i}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom'\r\nimport Notes from './Notes'\r\n\r\nconst Home = () => <h1>Home Page</h1>\r\nconst Users = () => <h1>Users</h1>\r\n\r\nconst App = () => {\r\n  const inlineStyles = {\r\n    padding: 5\r\n  }\r\n  return (\r\n    <BrowserRouter>\r\n      <header>\r\n        <Link to='/' style={inlineStyles}>Home</Link>\r\n        <Link to='/notes' style={inlineStyles}>Notes</Link>\r\n        <Link to='/users' style={inlineStyles}>Users</Link>\r\n      </header>\r\n      <Routes>\r\n        <Route path='/notes/:id'>\r\n          <h1>Single note</h1>\r\n        </Route>\r\n        <Route path='/notes' element={<Notes />} />\r\n        <Route path='/users' element={<Users />} />\r\n        <Route path='/' element={<Home />} />\r\n      </Routes>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n// import { BrowserRouter } from 'react-router-dom'\r\n\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n\r\n  <App />\r\n  ,\r\n  document.getElementById('root'))\r\n"],"sourceRoot":""}